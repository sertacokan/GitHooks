#!/bin/sh 

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

# Get branch nameset -x	

function runLintChecks(){

 echo "Runnig static analysis"

 ./gradlew app:ktlintCheck --daemon

# Check ktlint status
 KTLINT_STATUS=$?

 if [ "$KTLINT_STATUS" -eq 0 ]
 then
	echo "Static analysis found no problems."
	exit 0
 else 
	echo "Static analysis find these issues"	
	echo 1>&2 
	exit 1
 fi

 echo "Lint checks completed"
}

function runUnitTests(){

 echo "Running unit tests"

 ./gradlew clean test

 #Check unit test status
 UNIT_TEST_STATUS=$?

 if [ "$UNIT_TEST_STATUS" -eq 0 ]
 then
	echo "All test passed"
	exit 0
 else
	echo "Tests failed"
	echo 1>&2
	exit 1
 fi
}

BRANCH=`git rev-parse --abbrev-ref HEAD`

#A non-zero exit code will abort the push

if [ "$BRANCH" -ne "wip*" ]
then
	
	runLintChecks

	read -p "Do you want to run unit test? Y or N" UNIT_TEST_ANSWER

	case $UNIT_TEST_ANSWER in 
	[yY])
		runUnitTests
	;;
	*)
		echo "Unit tests are not running"
		exit 0	
	;;
	esac

fi	
#!/bin/sh -x
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

Color_Off='\033[0'
BRed="\033[1;31m"    # Red
BGreen="\033[1;32m"  # Green
BYellow="\033[1;33m" # Yellow
BBlue="\033[1;34m"

function check_commit_message() {

	export ERROR_MSG="First line of commit message longer than 72 character"

	COMMIT_MESSAGE=$1

	# -r disallows escape sequences, line condition

	IFS=$'\n' read -r -d '' -a MESSAGE_LINES <<<$COMMIT_MESSAGE

	COMMIT_MESSAGE_LINES="$MESSAGE_LINES"

	local FIRST_LINE_MESSAGE="${COMMIT_MESSAGE_LINES[0]}"

	#If this script exits non-zero, Git aborts the commit process

	if [ ${#FIRST_LINE_MESSAGE} -le 72 ]; then
		printf "${BGreen}Good commit!${Color_Off}\n"
		exit 0
	else
		printf "${BRed}Bad commit: ${BYellow}'%s'\n" $FIRST_LINE_MESSAGE
		printf "${BBlue}$ERROR_MSG\n"
		exit 1
	fi
}

# The commit-msg hook takes one parameter, which again is the path to a temporary file that contains the commit message written by the developer.

TEMPORARY_MSG_FILE=$1
FILE_CONTENT=$(cat $TEMPORARY_MSG_FILE)

# Check FILE_CONTENT is not empty

if [[ $FILE_CONTENT ]]; then
	check_commit_message "$FILE_CONTENT"
else
	printf "Please enter commit message\n"
	exit 1
fi

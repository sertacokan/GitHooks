#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

Color_Off='\033[0' 
BRed="\033[1;31m"         # Red
BGreen="\033[1;32m"       # Green
BYellow="\033[1;33m"      # Yellow
BBlue="\033[1;34m"

fun check_commit_message(){

	export ERROR_MSG="First line of commit message longer than 72 character"

	IFS="\n" read -a MESSAGE_LINES <<< "$1"
	set -x

	local FIRST_LINE_MESSAGE="${MESSAGE_LINES[0]}"

	if [[ ${#FIRST_LINE_MESSAGE} -le 72 ]];
	then
 		echo "${BGreen}Good commit!${Color_Off}"
 		exit 0
	else
		echo "${BRed}Bad commit ${BYellow}\"$FIRST_LINE_MESSAGE\"\n"
 		echo "${BBlue}$ERROR_MSG\n"
 		exit 1
	fi
	set +x
}

MSG_FILE=$1
FILE_CONTENT="$(cat $MSG_FILE)"

if [ -z "$FILE_CONTENT" ]
then
	check_commit_message $FILE_CONTENT
else
	echo "Please enter commit message"
fi	